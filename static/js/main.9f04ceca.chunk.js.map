{"version":3,"sources":["media/countdown.mp3","workers/letters.worker.ts","workers/numbers.worker.ts","game/actions.ts","game/reducer.ts","hooks/useCountdownGame.ts","hooks/useLocalStorage.ts","game/selectors.ts","components/LetterCard/LetterCard.tsx","components/Selection/Selection.tsx","components/NewGame/NewGame.tsx","hooks/useEventListener.ts","components/BetweenRounds/BetweenRounds.tsx","solvers/lettersSolver.ts","hooks/useLettersDeclaration.ts","hooks/useLettersSolution.ts","hooks/useTimer.ts","hooks/useInterval.ts","components/Timer/Timer.tsx","components/LettersRound/LettersRound.tsx","hooks/useNumbersDeclaration.ts","hooks/useNumbersSelection.ts","hooks/useNumbersSolution.ts","solvers/numbersSolver.ts","components/NumbersRound/NumbersRound.tsx","hooks/useConundrum.ts","components/ConundrumRound/ConundrumRound.tsx","components/Recap/Recap.tsx","components/GameOver/GameOver.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","addMethods","methods","w","Worker","name","setPlayerNames","p1Name","p2Name","type","startGame","variant","reduce","game","createNewGame","action","startLettersRound","drawConsonant","drawVowel","setLettersRoundResult","startNumbersRound","drawLarge","drawSmall","setTarget","setNumbersRoundResult","startConundrumRound","revealConundrum","setP1ConundrumDeclaration","setP2ConundrumDeclaration","solveConundrum","endRound","undefined","rounds","consonantPile","shuffleConsonants","vowelPile","shuffleVowels","largePile","shuffle","newLargePile","smallPile","newSmallPile","newLettersRound","updateLettersRound","updater","slice","length","consonant","round","selection","vowel","p1Declaration","p2Declaration","p1Score","p2Score","maxes","newNumbersRound","updateNumbersRound","large","small","value","target","max","newConundrumRound","updateConundrumRound","scramble","answer","buzzTime","declaration","p1BuzzTime","solved","p2BuzzTime","finished","method","isBadConsonant","letter","includes","pile","weightedShuffle","letterOrder","reverse","frequencies","i","push","newConsonantPile","Math","random","indicesToSwap","Array","map","_","idx","filter","randomIndex","floor","newVowelPile","vowelToIgnore","cards","counts","card","hasOwnProperty","weightedCounts","Object","keys","c","jdx","totalWeight","values","a","b","roll","runningTotal","_items","items","j","useCountdownGame","key","initialValue","useState","item","localStorage","getItem","JSON","parse","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","setGame","ROUNDS_9","picker","ROUNDS_15","getCurrentRound","getCurrentRoundDescription","roundIndex","getRoundDescription","getP1TotalScore","p1Scores","r","x","y","getP2TotalScore","p2Scores","getP1CumulativeScore","index","getP2CumulativeScore","getMaxCumulativeScore","maxForLettersRound","maxForNumbersRound","distanceFromTarget","abs","gameOver","numberOfRounds","template","squash","content","transform","LetterCard","className","style","Selection","str","NewGame","dispatch","onChange","e","onClick","useEventListener","eventName","handler","savedHandler","useRef","useEffect","current","eventListener","event","window","addEventListener","removeEventListener","roundSummary","description","BetweenRounds","nextRoundDescription","getNextRoundDescription","startNextRound","keyCode","words","checkValidity","word","lo","hi","mid","useLettersDeclarations","_declaration","_setDeclaration","score","setScore","setDeclaration","isValid","isContainedInSelection","selectionCounts","letterCounts","declarationCounts","every","useLettersSolution","validWords","setValidWords","maxLength","setMaxLength","arr","indexOf","addWord","ml","onWordFound","worker","lettersWorker","message","data","findWordsFromSelection","terminate","findAllWordsFromSelection","useTimer","seconds","onExpire","timeRemaining","setTimeRemaining","isRunning","setIsRunning","isExpired","setIsExpired","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","time","startTimer","resumeTimer","stopTimer","expireTimer","progressBarStyle","remaining","duration","width","Timer","secondsRemaining","durationSeconds","LettersRoundComponent","roundDescription","declarationsSubmitted","setDeclarationsSubmitted","useSound","countdownTheme","startSound","setP1Declaration","setP2Declaration","submitText","submitDeclarations","pickConsonant","countConsonants","pickVowel","countVowels","startRound","repeat","extendSelection","disabled","toUpperCase","trim","join","isVowel","extended","useNumbersDeclarations","valid","_setValid","scoreForDeclaration","setValid","useNumbersSelection","_dispatch","selectedLarges","_setSelectedLarges","selectionHasBeenMade","setSelectedLarges","larges","setTimeout","useNumbersSolution","setMax","addSolution","numbers","onMethodFound","numbersWorker","findNumbersMethods","ConundrumRoundState","NumbersRoundComponent","p1Valid","setP1Valid","p2Valid","setP2Valid","makeSelection","inputKeydown","stopPropagation","tabIndex","onKeyDown","checked","n","toString","randomConundrum","pickRandomConundrumAnswer","decentShuffle","numberOfConundrums","conundrums","singleShuffle","inversions","ConundrumRoundComponent","initialState","roundState","setRoundState","EXPIRED","pauseSound","pause","setBuzzTime","p1HasDeclared","setP1HasDeclared","p2HasDeclared","setP2HasDeclared","resume","TICKING","incorrect","INCORRECT","expired","SOLVED","buzz","GUESSING","declareForP1","guess","declareForP2","useConundrum","WAITING","showBuzzer","showReveal","emptySelection","incorrectSelection","getSelection","handleP1KeyDown","handleP2KeyDown","Recap","renderRoundRow","title","renderLettersRow","renderNumbersRow","normalizeBuzzTime","renderConundrumRow","roundedBuzzTime","min","toFixed","rd","GameOver","App","gameState","getGameState","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9f04ceca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/countdown.d27402a0.mp3\";","\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"findWordsFromSelection\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"4b71916eb634026e60b7.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"findNumbersMethods\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"6ddaab01775b8499af05.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import { Variant } from './game';\r\n\r\nexport const createNewGame = (): CreateNewGameAction => ({\r\n    type: 'CREATE_NEW_GAME'\r\n});\r\n\r\nexport const setPlayerNames = (p1Name: string, p2Name: string): SetPlayerNamesAction => ({\r\n    type: 'SET_PLAYER_NAMES',\r\n    p1Name, p2Name\r\n});\r\n\r\nexport const startGame = (variant: Variant): StartGameAction => ({\r\n    type: 'START_GAME',\r\n    variant\r\n});\r\n\r\nexport const startLettersRound = (): StartLettersRoundAction => ({\r\n    type: 'START_LETTERS_ROUND'\r\n});\r\n\r\nexport const drawConsonant = (): DrawConsonantAction => ({\r\n    type: 'DRAW_CONSONANT'\r\n});\r\n\r\nexport const drawVowel = (): DrawVowelAction => ({\r\n    type: 'DRAW_VOWEL'\r\n});\r\n\r\nexport const setLettersRoundResult = (p1Declaration: string, p2Declaration: string, p1Score: number, p2Score: number, maxes: string[]): SetLettersRoundResultAction => ({\r\n    type: 'SET_LETTERS_ROUND_RESULT',\r\n    p1Declaration, p2Declaration, p1Score, p2Score, maxes\r\n});\r\n\r\nexport const startNumbersRound = (): StartNumbersRoundAction => ({\r\n    type: 'START_NUMBERS_ROUND'\r\n});\r\n\r\nexport const drawLarge = (): DrawLargeAction => ({\r\n    type: 'DRAW_LARGE'\r\n});\r\n\r\nexport const drawSmall = (): DrawSmallAction => ({\r\n    type: 'DRAW_SMALL'\r\n});\r\n\r\nexport const setTarget = (): SetTargetAction => ({\r\n    type: 'SET_TARGET',\r\n    value: 100 + Math.floor(900 * Math.random())\r\n});\r\n\r\nexport const setNumbersRoundResult = (p1Declaration: number, p2Declaration: number, p1Score: number, p2Score: number, max: {value: number, method: string}): SetNumbersRoundResultAction => ({\r\n    type: 'SET_NUMBERS_ROUND_RESULT',\r\n    p1Declaration, p2Declaration, p1Score, p2Score, max\r\n});\r\n\r\nexport const startConundrumRound = (): StartConundrumRoundAction => ({\r\n    type: 'START_CONUNDRUM_ROUND'\r\n});\r\n\r\nexport const revealConundrum = (scramble: string, answer: string): RevealConundrumAction => ({\r\n    type: 'REVEAL_CONUNDRUM',\r\n    scramble, answer\r\n});\r\n\r\nexport const setP1ConundrumDeclaration = (buzzTime: number, declaration: string): SetP1ConundrumDeclarationAction => ({\r\n    type: 'SET_P1_CONUNDRUM_DECLARATION',\r\n    buzzTime, declaration\r\n});\r\n\r\nexport const setP2ConundrumDeclaration = (buzzTime: number, declaration: string): SetP2ConundrumDeclarationAction => ({\r\n    type: 'SET_P2_CONUNDRUM_DECLARATION',\r\n    buzzTime, declaration\r\n});\r\n\r\nexport const solveConundrum = (): SolveConundrumAction => ({\r\n    type: 'SOLVE_CONUNDRUM'\r\n});\r\n\r\nexport const endRound = (): EndRoundAction => ({\r\n    type: 'END_ROUND'\r\n});\r\n\r\nexport interface CreateNewGameAction {\r\n    type: 'CREATE_NEW_GAME';\r\n}\r\n\r\nexport interface SetPlayerNamesAction {\r\n    type: 'SET_PLAYER_NAMES';\r\n    p1Name: string;\r\n    p2Name: string;\r\n}\r\n\r\nexport interface StartGameAction {\r\n    type: 'START_GAME';\r\n    variant: Variant;\r\n}\r\n\r\nexport interface StartLettersRoundAction {\r\n    type: 'START_LETTERS_ROUND';\r\n}\r\n\r\nexport interface DrawConsonantAction {\r\n    type: 'DRAW_CONSONANT';\r\n}\r\n\r\nexport interface DrawVowelAction {\r\n    type: 'DRAW_VOWEL';\r\n}\r\n\r\nexport interface SetLettersRoundResultAction {\r\n    type: 'SET_LETTERS_ROUND_RESULT';\r\n    p1Declaration: string;\r\n    p2Declaration: string;\r\n    p1Score: number;\r\n    p2Score: number;\r\n    maxes: string[];\r\n}\r\n\r\nexport interface StartNumbersRoundAction {\r\n    type: 'START_NUMBERS_ROUND';\r\n}\r\n\r\nexport interface DrawLargeAction {\r\n    type: 'DRAW_LARGE';\r\n}\r\n\r\nexport interface DrawSmallAction {\r\n    type: 'DRAW_SMALL';\r\n}\r\n\r\nexport interface SetTargetAction {\r\n    type: 'SET_TARGET';\r\n    value: number;\r\n}\r\n\r\nexport interface SetNumbersRoundResultAction {\r\n    type: 'SET_NUMBERS_ROUND_RESULT';\r\n    p1Declaration: number;\r\n    p2Declaration: number;\r\n    p1Score: number;\r\n    p2Score: number;\r\n    max: {value: number, method: string};\r\n}\r\n\r\nexport interface StartConundrumRoundAction {\r\n    type: 'START_CONUNDRUM_ROUND';\r\n}\r\n\r\nexport interface RevealConundrumAction {\r\n    type: 'REVEAL_CONUNDRUM';\r\n    scramble: string;\r\n    answer: string;\r\n}\r\n\r\nexport interface SetP1ConundrumDeclarationAction {\r\n    type: 'SET_P1_CONUNDRUM_DECLARATION';\r\n    buzzTime: number;\r\n    declaration: string;\r\n}\r\n\r\nexport interface SetP2ConundrumDeclarationAction {\r\n    type: 'SET_P2_CONUNDRUM_DECLARATION';\r\n    buzzTime: number;\r\n    declaration: string;\r\n}\r\n\r\nexport interface SolveConundrumAction {\r\n    type: 'SOLVE_CONUNDRUM';\r\n}\r\n\r\nexport interface EndRoundAction {\r\n    type: 'END_ROUND';\r\n}\r\n\r\nexport type CountdownAction = CreateNewGameAction | SetPlayerNamesAction | StartGameAction | StartLettersRoundAction | DrawConsonantAction | DrawVowelAction | SetLettersRoundResultAction | StartNumbersRoundAction | DrawLargeAction | DrawSmallAction | SetTargetAction | SetNumbersRoundResultAction | StartConundrumRoundAction | RevealConundrumAction | SetP1ConundrumDeclarationAction | SetP2ConundrumDeclarationAction | SolveConundrumAction | EndRoundAction;\r\n","import { CountdownGame, LettersRound, NumbersRound, ConundrumRound } from './game'\r\nimport { CountdownAction, StartGameAction, SetPlayerNamesAction, SetLettersRoundResultAction, SetTargetAction, SetNumbersRoundResultAction, RevealConundrumAction, SetP1ConundrumDeclarationAction, SetP2ConundrumDeclarationAction } from './actions'\r\n\r\nexport default function reduce(game: CountdownGame = createNewGame(), action: CountdownAction): CountdownGame {\r\n    switch (action.type) {\r\n        case 'CREATE_NEW_GAME': return createNewGame();\r\n        case 'SET_PLAYER_NAMES': return setPlayerNames(game, action);\r\n        case 'START_GAME': return startGame(game, action);\r\n        case 'START_LETTERS_ROUND': return startLettersRound(game);\r\n        case 'DRAW_CONSONANT': return drawConsonant(game);\r\n        case 'DRAW_VOWEL': return drawVowel(game);\r\n        case 'SET_LETTERS_ROUND_RESULT': return setLettersRoundResult(game, action);\r\n        case 'START_NUMBERS_ROUND': return startNumbersRound(game);\r\n        case 'DRAW_LARGE': return drawLarge(game);\r\n        case 'DRAW_SMALL': return drawSmall(game);\r\n        case 'SET_TARGET': return setTarget(game, action);\r\n        case 'SET_NUMBERS_ROUND_RESULT': return setNumbersRoundResult(game, action);\r\n        case 'START_CONUNDRUM_ROUND': return startConundrumRound(game);\r\n        case 'REVEAL_CONUNDRUM': return revealConundrum(game, action);\r\n        case 'SET_P1_CONUNDRUM_DECLARATION': return setP1ConundrumDeclaration(game, action);\r\n        case 'SET_P2_CONUNDRUM_DECLARATION': return setP2ConundrumDeclaration(game, action);\r\n        case 'SOLVE_CONUNDRUM': return solveConundrum(game);\r\n        case 'END_ROUND': return endRound(game);\r\n        default: return game;\r\n    }\r\n}\r\n\r\nconst createNewGame = (): CountdownGame => ({\r\n    p1Name: 'Player 1',\r\n    p2Name: 'Player 2',\r\n    variant: undefined,\r\n    rounds: [],\r\n    consonantPile: shuffleConsonants(),\r\n    vowelPile: shuffleVowels(),\r\n    largePile: shuffle(newLargePile()),\r\n    smallPile: shuffle(newSmallPile())\r\n});\r\n\r\nconst setPlayerNames = (game: CountdownGame, {p1Name, p2Name}: SetPlayerNamesAction): CountdownGame => ({\r\n    ...game,\r\n    p1Name, p2Name\r\n});\r\n\r\nconst startGame = (game: CountdownGame, {variant}: StartGameAction): CountdownGame => ({\r\n    ...game,\r\n    variant\r\n});\r\n\r\nconst startLettersRound = (game: CountdownGame): CountdownGame => ({\r\n    ...game,\r\n    rounds: [\r\n        ...game.rounds,\r\n        newLettersRound()\r\n    ]\r\n});\r\n\r\nconst updateLettersRound = (game: CountdownGame, updater: (_: LettersRound) => LettersRound): CountdownGame => ({\r\n    ...game,\r\n    rounds: [\r\n        ...game.rounds.slice(0, -1),\r\n        updater(game.rounds[game.rounds.length - 1] as LettersRound)\r\n    ]\r\n});\r\n\r\nconst drawConsonant = (game: CountdownGame): CountdownGame => {\r\n    const consonant = game.consonantPile[0];\r\n    return {\r\n        ...updateLettersRound(game, round => ({\r\n            ...round,\r\n            selection: [...round.selection, consonant]\r\n        })),\r\n        consonantPile: game.consonantPile.slice(1),\r\n    }\r\n};\r\n\r\nconst drawVowel = (game: CountdownGame): CountdownGame => {\r\n    const vowel = game.vowelPile[0];\r\n    return {\r\n        ...updateLettersRound(game, round => ({\r\n            ...round,\r\n            selection: [...round.selection, vowel]\r\n        })),\r\n        vowelPile: game.vowelPile.slice(1),\r\n    };\r\n};\r\n\r\nconst setLettersRoundResult = (game: CountdownGame, {p1Declaration, p2Declaration, p1Score, p2Score, maxes}: SetLettersRoundResultAction): CountdownGame => updateLettersRound(game, round => ({\r\n    ...round,\r\n    p1Declaration, p2Declaration, p1Score, p2Score, maxes\r\n}));\r\n\r\nconst startNumbersRound = (game: CountdownGame): CountdownGame => ({\r\n    ...game,\r\n    rounds: [\r\n        ...game.rounds,\r\n        newNumbersRound()\r\n    ],\r\n    largePile: shuffle(newLargePile()),\r\n    smallPile: shuffle(newSmallPile())\r\n});\r\n\r\nconst updateNumbersRound = (game: CountdownGame, updater: (_: NumbersRound) => NumbersRound): CountdownGame => ({\r\n    ...game,\r\n    rounds: [\r\n        ...game.rounds.slice(0, -1),\r\n        updater(game.rounds[game.rounds.length - 1] as NumbersRound)\r\n    ]\r\n});\r\n\r\nconst drawLarge = (game: CountdownGame): CountdownGame => {\r\n    const large = game.largePile[0];\r\n    return {\r\n        ...updateNumbersRound(game, round => ({\r\n            ...round,\r\n            selection: [large, ...round.selection]\r\n        })),\r\n        largePile: game.largePile.slice(1)\r\n    };\r\n};\r\n\r\nconst drawSmall = (game: CountdownGame): CountdownGame => {\r\n    const small = game.smallPile[0];\r\n    return {\r\n        ...updateNumbersRound(game, round => ({\r\n            ...round,\r\n            selection: [small, ...round.selection]\r\n        })),\r\n        smallPile: game.smallPile.slice(1)\r\n    };\r\n};\r\n\r\nconst setTarget = (game: CountdownGame, {value}: SetTargetAction): CountdownGame => updateNumbersRound(game, round => ({\r\n    ...round,\r\n    target: value\r\n}));\r\n\r\nconst setNumbersRoundResult = (game: CountdownGame, {p1Declaration, p2Declaration, p1Score, p2Score, max}: SetNumbersRoundResultAction): CountdownGame => updateNumbersRound(game, round => ({\r\n    ...round,\r\n    p1Declaration, p2Declaration, p1Score, p2Score, max\r\n}));\r\n\r\nconst startConundrumRound = (game: CountdownGame): CountdownGame => ({\r\n    ...game,\r\n    rounds: [\r\n        ...game.rounds,\r\n        newConundrumRound()\r\n    ]\r\n});\r\n\r\nconst updateConundrumRound = (game: CountdownGame, updater: (_: ConundrumRound) => ConundrumRound): CountdownGame => ({\r\n    ...game,\r\n    rounds: [\r\n        ...game.rounds.slice(0, -1),\r\n        updater(game.rounds[game.rounds.length - 1] as ConundrumRound)\r\n    ]\r\n});\r\n\r\nconst revealConundrum = (game: CountdownGame, {scramble, answer}: RevealConundrumAction): CountdownGame => updateConundrumRound(game, round => ({\r\n    ...round,\r\n    scramble, answer\r\n}));\r\n\r\nconst setP1ConundrumDeclaration = (game: CountdownGame, {buzzTime, declaration}: SetP1ConundrumDeclarationAction): CountdownGame => updateConundrumRound(game, round => ({\r\n    ...round,\r\n    p1BuzzTime: buzzTime,\r\n    p1Declaration: declaration,\r\n    p1Score: declaration === round.answer ? 10 : 0,\r\n    solved: declaration === round.answer\r\n}));\r\n\r\nconst setP2ConundrumDeclaration = (game: CountdownGame, {buzzTime, declaration}: SetP2ConundrumDeclarationAction): CountdownGame => updateConundrumRound(game, round => ({\r\n    ...round,\r\n    p2BuzzTime: buzzTime,\r\n    p2Declaration: declaration,\r\n    p2Score: declaration === round.answer ? 10 : 0,\r\n    solved: declaration === round.answer\r\n}));\r\n\r\nconst solveConundrum = (game: CountdownGame): CountdownGame => updateConundrumRound(game, round => ({\r\n    ...round,\r\n    solved: true\r\n}));\r\n\r\nconst endRound = (game: CountdownGame): CountdownGame => ({\r\n    ...game,\r\n    rounds: [\r\n        ...game.rounds.slice(0, -1),\r\n        {\r\n            ...game.rounds[game.rounds.length - 1],\r\n            finished: true\r\n        }\r\n    ]\r\n});\r\n\r\nconst newLettersRound = (): LettersRound => ({\r\n    type: 'LETTERS',\r\n    selection: [],\r\n    maxes: [],\r\n    finished: false,\r\n    p1Declaration: undefined,\r\n    p2Declaration: undefined,\r\n    p1Score: 0,\r\n    p2Score: 0\r\n});\r\n\r\nconst newNumbersRound = (): NumbersRound => ({\r\n    type: 'NUMBERS',\r\n    selection: [],\r\n    target: 0,\r\n    max: {value: 0, method: ''},\r\n    finished: false,\r\n    p1Declaration: undefined,\r\n    p2Declaration: undefined,\r\n    p1Score: 0,\r\n    p2Score: 0\r\n});\r\n\r\nconst newConundrumRound = (): ConundrumRound => ({\r\n    type: 'CONUNDRUM',\r\n    scramble: undefined,\r\n    answer: undefined,\r\n    solved: false,\r\n    finished: false,\r\n    p1BuzzTime: undefined,\r\n    p2BuzzTime: undefined,\r\n    p1Declaration: undefined,\r\n    p2Declaration: undefined,\r\n    p1Score: 0,\r\n    p2Score: 0\r\n});\r\n\r\nconst newConsonantPile = () => {\r\n    const letterOrder = ['R', 'S', 'T', 'N', 'D', 'L', 'G', 'M', 'P', 'C', 'B', 'F', 'H', 'V', 'W', 'J', 'K', 'Q', 'X', 'Y', 'Z'].reverse();\r\n    const frequencies: {[s: string]: number} = {'R': 9, 'S': 9, 'T': 9, 'N': 8, 'D': 6, 'L': 5, 'G': 4, 'M': 4, 'P': 4, 'C': 3, 'B': 2, 'F': 2, 'H': 2, 'V': 2, 'W': 2, 'J': 1, 'K': 1, 'Q': 1, 'X': 1, 'Y': 1, 'Z': 1};\r\n    const pile = [];\r\n    for (const letter of letterOrder) {\r\n        for (let i = 0; i < frequencies[letter]; ++i) {\r\n            pile.push(letter);\r\n        }\r\n    }\r\n    return pile;\r\n}\r\n\r\nconst newVowelPile = () => {\r\n    const letterOrder = ['E', 'A', 'I', 'O', 'U'].reverse();\r\n    const frequencies: {[s: string]: number} = {'E': 20, 'A': 15, 'I': 13, 'O': 13, 'U': 7};\r\n    const pile = [];\r\n    for (const letter of letterOrder) {\r\n        for (let i = 0; i < frequencies[letter]; ++i) {\r\n            pile.push(letter);\r\n        }\r\n    }\r\n    return pile;\r\n}\r\n\r\nconst newLargePile = () => [100, 75, 50, 25];\r\n\r\nconst newSmallPile = () => [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10];\r\n\r\nconst isBadConsonant = (letter: string) => ['C', 'B', 'F', 'H', 'V', 'W', 'J', 'K', 'Q', 'X', 'Y', 'Z'].includes(letter);\r\n\r\nconst shuffleConsonants = () => {\r\n    const pile = weightedShuffle(newConsonantPile());\r\n    for (let i = 0; i < pile.length - 2; ++i) {\r\n        if (isBadConsonant(pile[i]) && isBadConsonant(pile[i + 1]) && isBadConsonant(pile[i + 2]) && Math.random() < 0.9) {\r\n            const indicesToSwap = [...Array(pile.length - i - 3)].map((_, idx) => idx + i + 3).filter(idx => !isBadConsonant(pile[idx]));\r\n            if (indicesToSwap.length > 0) {\r\n                const randomIndex = Math.floor(Math.random() * indicesToSwap.length);\r\n                [pile[i + 1], pile[indicesToSwap[randomIndex]]] = [pile[indicesToSwap[randomIndex]], pile[i + 1]];\r\n            }\r\n        }\r\n    }\r\n    return pile;\r\n};\r\n\r\nconst shuffleVowels = () => {\r\n    const pile = weightedShuffle(newVowelPile());\r\n    for (let i = 0; i < pile.length - 3; ++i) {\r\n        if (pile[i] === pile[i + 1] && pile[i + 1] === pile[i + 2] && Math.random() < 0.9) {\r\n            const vowelToIgnore = pile[i];\r\n            const indicesToSwap = [...Array(pile.length - i - 3)].map((_, idx) => idx + i + 3).filter(idx => pile[idx] !== vowelToIgnore);\r\n            if (indicesToSwap.length > 0) {\r\n                const randomIndex = Math.floor(Math.random() * indicesToSwap.length);\r\n                [pile[i + 1], pile[indicesToSwap[randomIndex]]] = [pile[indicesToSwap[randomIndex]], pile[i + 1]];\r\n            }\r\n        }\r\n    }\r\n    return pile;\r\n};\r\n\r\nconst weightedShuffle = (cards: string[]) => {\r\n\r\n    const counts: {[s: string]: number} = {}\r\n    for (const card of cards) {\r\n        if (!counts.hasOwnProperty(card)) {\r\n            counts[card] = 0;\r\n        }\r\n        counts[card] += 1;\r\n    }\r\n\r\n    const pile: string[] = [];\r\n\r\n    for (let idx = 0; idx < cards.length; idx++) {\r\n        const weightedCounts: {[s: string]: number} = {}\r\n        for (const c of Object.keys(counts)) {\r\n            weightedCounts[c] = counts[c];\r\n        }\r\n        for (let jdx = idx - 1; jdx >= idx - 3 && jdx >= 0; jdx--) {\r\n            weightedCounts[pile[jdx]] /= 2;\r\n        }\r\n        const totalWeight = 8 * Object.values(weightedCounts).reduce((a, b) => a + b, 0);\r\n\r\n        const roll = Math.floor(Math.random() * totalWeight);\r\n        let runningTotal = 0;\r\n        for (const c of Object.keys(weightedCounts)) {\r\n            runningTotal += 8 * weightedCounts[c];\r\n            if (runningTotal > roll) {\r\n                pile.push(c);\r\n                counts[c] -= 1;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return pile;\r\n}\r\n\r\nconst shuffle = <T>(_items: T[]) => {\r\n    const items = [..._items];\r\n    for (let i = items.length - 1; i > 0; --i) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [items[i], items[j]] = [items[j], items[i]];\r\n    }\r\n    return items;\r\n}\r\n","import useLocalStorage from './useLocalStorage';\r\nimport { CountdownGame } from '../game/game';\r\nimport { CountdownAction, createNewGame } from '../game/actions';\r\nimport reduce from '../game/reducer';\r\n\r\nexport default function useCountdownGame(): [CountdownGame, (_: CountdownAction) => void] {\r\n    const [game, setGame] = useLocalStorage<CountdownGame>('countdownGame', reduce(undefined, createNewGame()));\r\n    const dispatch = (action: CountdownAction) => setGame(game => reduce(game, action));\r\n    return [game, dispatch];\r\n}\r\n","import { useState } from 'react';\r\n\r\nexport default function useLocalStorage<T>(key: string, initialValue: T): [T, (_: (T | ((_: T) => T))) => void] {\r\n\r\n    const [storedValue, setStoredValue] = useState<T>(() => {\r\n        try {\r\n            const item = localStorage.getItem(key);\r\n            return item ? JSON.parse(item) : initialValue;\r\n        } catch {\r\n            return initialValue;\r\n        }\r\n    });\r\n\r\n    const setValue = (value: T | ((_: T) => T)) => {\r\n        const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n        setStoredValue(valueToStore);\r\n        localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    };\r\n\r\n    return [storedValue, setValue];\r\n}\r\n","import { CountdownGame, Round, LettersRound, NumbersRound } from './game';\r\n\r\nexport type GameState = 'WAITING' | 'BETWEEN' | 'LETTERS' | 'NUMBERS' | 'CONUNDRUM' | 'ENDED';\r\n\r\nexport interface RoundDescription {\r\n    type: 'LETTERS' | 'NUMBERS' | 'CONUNDRUM';\r\n    picker: string | undefined;\r\n}\r\n\r\nconst ROUNDS_9: {type: 'LETTERS' | 'NUMBERS' | 'CONUNDRUM', picker: number | undefined}[] = [\r\n    { type: 'LETTERS', picker: 1 },\r\n    { type: 'LETTERS', picker: 2 },\r\n    { type: 'LETTERS', picker: 1 },\r\n    { type: 'NUMBERS', picker: 2 },\r\n    { type: 'LETTERS', picker: 2 },\r\n    { type: 'LETTERS', picker: 1 },\r\n    { type: 'LETTERS', picker: 2 },\r\n    { type: 'NUMBERS', picker: 1 },\r\n    { type: 'CONUNDRUM', picker: undefined },\r\n];\r\n\r\nconst ROUNDS_15: {type: 'LETTERS' | 'NUMBERS' | 'CONUNDRUM', picker: number | undefined}[] = [\r\n    { type: 'LETTERS', picker: 1 },\r\n    { type: 'LETTERS', picker: 2 },\r\n    { type: 'NUMBERS', picker: 1 },\r\n    { type: 'LETTERS', picker: 2 },\r\n    { type: 'LETTERS', picker: 1 },\r\n    { type: 'NUMBERS', picker: 2 },\r\n    { type: 'LETTERS', picker: 1 },\r\n    { type: 'LETTERS', picker: 2 },\r\n    { type: 'NUMBERS', picker: 1 },\r\n    { type: 'LETTERS', picker: 2 },\r\n    { type: 'LETTERS', picker: 1 },\r\n    { type: 'LETTERS', picker: 2 },\r\n    { type: 'LETTERS', picker: 1 },\r\n    { type: 'NUMBERS', picker: 2 },\r\n    { type: 'CONUNDRUM', picker: undefined },\r\n];\r\n\r\nexport const getGameState = (game: CountdownGame): GameState => {\r\n    if (game.variant === undefined) return 'WAITING';\r\n    else if (game.rounds.length === 0) return 'BETWEEN';\r\n    else if (getCurrentRound(game).finished) return gameOver(game) ? 'ENDED' : 'BETWEEN';\r\n    else return game.rounds[game.rounds.length - 1].type;\r\n};\r\n\r\nexport const getCurrentRound = (game: CountdownGame): Round => {\r\n    return game.rounds[game.rounds.length - 1];\r\n}\r\n\r\nexport const getCurrentRoundDescription = (game: CountdownGame): RoundDescription => {\r\n    const roundIndex = game.rounds.length - 1;\r\n    return getRoundDescription(game, roundIndex);\r\n};\r\n\r\nexport const getNextRoundDescription = (game: CountdownGame): RoundDescription => {\r\n    const roundIndex = game.rounds.length;\r\n    return getRoundDescription(game, roundIndex);\r\n};\r\n\r\nexport const getP1TotalScore = (game: CountdownGame): number => {\r\n    return game.rounds.filter(p1Scores).map(r => r.p1Score).reduce((x, y) => x + y, 0);\r\n}\r\n\r\nexport const getP2TotalScore = (game: CountdownGame): number => {\r\n    return game.rounds.filter(p2Scores).map(r => r.p2Score).reduce((x, y) => x + y, 0);\r\n}\r\n\r\nexport const getP1CumulativeScore = (game: CountdownGame, index: number) => {\r\n    return game.rounds.slice(0, index + 1).filter(p1Scores).map(r => r.p1Score).reduce((x, y) => x + y, 0);\r\n}\r\n\r\nexport const getP2CumulativeScore = (game: CountdownGame, index: number) => {\r\n    return game.rounds.slice(0, index + 1).filter(p2Scores).map(r => r.p2Score).reduce((x, y) => x + y, 0);\r\n}\r\n\r\nexport const getMaxCumulativeScore = (game: CountdownGame, index: number) => {\r\n    const maxForRound = (round: Round) => round.type === 'LETTERS' ? maxForLettersRound(round) : round.type === 'NUMBERS' ? maxForNumbersRound(round) : 10;\r\n    return game.rounds.slice(0, index + 1).map(r => maxForRound(r)).reduce((x, y) => x + y, 0);\r\n}\r\n\r\nconst maxForLettersRound = (round: LettersRound) => round.maxes[0].length === 9 ? 18 : round.maxes[0].length;\r\n\r\nconst maxForNumbersRound = (round: NumbersRound) => {\r\n    const distanceFromTarget = Math.abs(round.target - round.max.value);\r\n    return distanceFromTarget === 0 ? 10 : distanceFromTarget <= 5 ? 7 : distanceFromTarget <= 10 ? 5 : 0;\r\n}\r\n\r\nconst p1Scores = (round: Round): boolean => {\r\n    if (round.type === 'LETTERS' || round.type === 'CONUNDRUM') return round.p1Score >= round.p2Score;\r\n    else if (round.type === 'NUMBERS') return (round.p1Score >= round.p2Score) && (round.p1Score > round.p2Score || Math.abs(round.target - (round.p1Declaration as number)) <= (Math.abs(round.target - (round.p2Declaration as number))));\r\n    return true;\r\n}\r\n\r\nconst p2Scores = (round: Round): boolean => {\r\n    if (round.type === 'LETTERS' || round.type === 'CONUNDRUM') return round.p2Score >= round.p1Score;\r\n    else if (round.type === 'NUMBERS') return (round.p2Score >= round.p1Score) && (round.p2Score > round.p1Score || Math.abs(round.target - (round.p2Declaration as number)) <= (Math.abs(round.target - (round.p1Declaration as number))));\r\n    return true;\r\n}\r\n\r\nconst numberOfRounds = (game: CountdownGame): number => {\r\n    if (game.variant === '9R') return 9;\r\n    else return 15;\r\n}\r\n\r\nconst gameOver = (game: CountdownGame): boolean => {\r\n    if (game.rounds.length >= numberOfRounds(game) && getCurrentRound(game).finished) {\r\n        return getP1TotalScore(game) !== getP2TotalScore(game);\r\n    }\r\n    return false;\r\n};\r\n\r\nconst getRoundDescription = (game: CountdownGame, index: number): RoundDescription => {\r\n    const template = (game.variant === '9R' ? ROUNDS_9[index] : ROUNDS_15[index]) || { type: 'CONUNDRUM', picker: undefined };\r\n    return {\r\n        type: template.type,\r\n        picker: template.picker === 1 ? game.p1Name : template.picker === 2 ? game.p2Name : undefined\r\n    };\r\n};\r\n","import React from 'react';\r\nimport './LetterCard.css';\r\n\r\nexport interface LetterCardProps {\r\n    content: string;\r\n}\r\n\r\nconst LetterCard: React.FC<LetterCardProps> = ({ content }) => {\r\n    return (\r\n        <div className={'letter-card ' + (content.length === 0 ? 'letter-card--empty' : '')}>\r\n            <div style={squash(content)}>{content}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst squash = (content: string) => ({\r\n    transform: content.length <= 1 ? 'scaleX(1)' : content.length === 2 ? 'scaleX(0.8)' : 'scaleX(0.6)'\r\n});\r\n\r\nexport default LetterCard;\r\n","import React from 'react';\r\nimport './Selection.css';\r\n\r\nimport LetterCard from '../LetterCard/LetterCard';\r\n\r\nexport interface SelectionProps {\r\n    selection: string[];\r\n}\r\n\r\nconst Selection: React.FC<SelectionProps> = ({ selection }) => {\r\n    return (\r\n        <div className=\"selection\">\r\n            {selection.map((str, idx) =>\r\n                <LetterCard key={idx} content={str}></LetterCard>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Selection;\r\n","import React from 'react';\r\nimport './NewGame.css';\r\n\r\nimport { setPlayerNames, startGame, CountdownAction } from '../../game/actions';\r\nimport { CountdownGame } from '../../game/game';\r\nimport Selection from '../Selection/Selection';\r\n\r\nexport interface NewGameProps {\r\n    game: CountdownGame;\r\n    dispatch: (_: CountdownAction) => void;\r\n}\r\n\r\nconst NewGame: React.FC<NewGameProps> = ({game, dispatch}) => {\r\n    return (\r\n        <div className=\"new-game\">\r\n            <div className=\"game__selection\">\r\n                <Selection selection={['C', 'O', 'U', 'N', 'T', 'D', 'O', 'W', 'N']}></Selection>\r\n            </div>\r\n            <div className=\"new-game__names\">\r\n                <div className=\"new-game__name\">\r\n                    <div className=\"new-game__label\">Player 1 Name</div>\r\n                    <input type=\"text\" value={game.p1Name} onChange={e => dispatch(setPlayerNames(e.target.value, game.p2Name))}></input>\r\n                </div>\r\n                <div className=\"new-game__name\">\r\n                    <div className=\"new-game__label\">Player 2 Name</div>\r\n                    <input type=\"text\" value={game.p2Name} onChange={e => dispatch(setPlayerNames(game.p1Name, e.target.value))}></input>\r\n                </div>\r\n            </div>\r\n            <div className=\"new-game__buttons\">\r\n                <button className=\"button--blue\" onClick={() => dispatch(startGame('9R'))}>Start 9-Rounder</button>\r\n                <button className=\"button--blue\" onClick={() => dispatch(startGame('15R'))}>Start 15-Rounder</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewGame;\r\n","import { useRef, useEffect } from \"react\";\r\n\r\nexport default function useEventListener<T extends Event>(eventName: string, handler: (event: T) => void) {\r\n\r\n    const savedHandler = useRef(handler);\r\n    useEffect(() => {\r\n        savedHandler.current = handler\r\n    }, [handler]);\r\n\r\n    useEffect(() => {\r\n        const eventListener = (event: Event) => savedHandler.current(event as T);\r\n        window.addEventListener(eventName, eventListener);\r\n        return () => window.removeEventListener(eventName, eventListener);\r\n    }, [eventName]);\r\n}\r\n","import React from 'react';\r\nimport './BetweenRounds.css';\r\nimport { CountdownGame } from '../../game/game';\r\nimport { CountdownAction, startLettersRound, startNumbersRound, startConundrumRound } from '../../game/actions';\r\nimport { getP1TotalScore, getP2TotalScore, getNextRoundDescription, RoundDescription } from '../../game/selectors';\r\nimport useEventListener from '../../hooks/useEventListener';\r\n\r\nexport interface BetweenRoundsProps {\r\n    game: CountdownGame;\r\n    dispatch: (_: CountdownAction) => void;\r\n}\r\n\r\nconst BetweenRounds: React.FC<BetweenRoundsProps> = ({game, dispatch}) => {\r\n\r\n    const nextRoundDescription = getNextRoundDescription(game);\r\n\r\n    const startNextRound = () => {\r\n        switch (nextRoundDescription.type) {\r\n            case 'LETTERS': return dispatch(startLettersRound());\r\n            case 'NUMBERS': return dispatch(startNumbersRound());\r\n            case 'CONUNDRUM': return dispatch(startConundrumRound());\r\n        }\r\n    }\r\n\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n        if (e.keyCode === 32) {\r\n            startNextRound();\r\n        }\r\n    }\r\n\r\n    useEventListener('keydown', handleKeyDown);\r\n\r\n    return (\r\n        <div className=\"between-rounds\">\r\n            <div className=\"game__score\">{game.p1Name} {getP1TotalScore(game)} - {getP2TotalScore(game)} {game.p2Name}</div>\r\n            <div className=\"game__round-description\">The next round will be: {roundSummary(nextRoundDescription)}</div>\r\n            <button className=\"button--blue\" onClick={() => startNextRound()}>Start next round</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst roundSummary = (description: RoundDescription) => {\r\n    switch (description.type) {\r\n        case 'LETTERS': return `Letters picked by ${description.picker}`;\r\n        case 'NUMBERS': return `Numbers picked by ${description.picker}`;\r\n        case 'CONUNDRUM': return `Conundrum`;\r\n    }\r\n}\r\n\r\nexport default BetweenRounds;\r\n","// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport lettersWorker from 'workerize-loader!../workers/letters.worker';\r\nimport _words from '../data/words.json';\r\nconst words = _words.words;\r\n\r\nexport const checkValidity = (word: string): boolean => {\r\n    let [lo, hi] = [0, words.length - 1];\r\n    while (lo <= hi) {\r\n        const mid = Math.floor((lo + hi) / 2);\r\n        if (words[mid] === word) return true;\r\n        else if (words[mid] < word) lo = mid + 1;\r\n        else if (words[mid] > word) hi = mid - 1;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const findAllWordsFromSelection = (selection: string[], onWordFound: (_: string) => void): (() => void) => {\r\n    const worker = lettersWorker();\r\n    worker.addEventListener('message', (message: any) => {\r\n        if (message.data.type === 'WORD') {\r\n            onWordFound(message.data.value);\r\n        }\r\n    });\r\n    worker.findWordsFromSelection(selection);\r\n    return () => worker.terminate();\r\n}\r\n","import { useState } from 'react';\r\n\r\nimport { checkValidity } from '../solvers/lettersSolver';\r\n\r\nexport default function useLettersDeclarations(selection: string[], _declaration: string = '') {\r\n    const [declaration, _setDeclaration] = useState(_declaration);\r\n    const [score, setScore] = useState(0);\r\n\r\n    const setDeclaration = (word: string) => {\r\n        const isValid = isContainedInSelection(word, selection) && checkValidity(word);\r\n        _setDeclaration(word);\r\n        setScore(isValid ? (word.length === 9 ? 18 : word.length) : 0);\r\n    };\r\n\r\n    return { declaration, setDeclaration, score };\r\n}\r\n\r\nconst isContainedInSelection = (word: string, selection: string[]): boolean => {\r\n    const selectionCounts = letterCounts(selection);\r\n    const declarationCounts = letterCounts([...word]);\r\n    return Object.keys(declarationCounts).every(c => selectionCounts[c] && selectionCounts[c] >= declarationCounts[c]);\r\n}\r\n\r\nconst letterCounts = (selection: string[]): {[s: string]: number} => {\r\n    const counts: {[s: string]: number} = {};\r\n    for (const letter of selection) counts[letter] = (counts[letter] || 0) + 1;\r\n    return counts;\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { findAllWordsFromSelection } from '../solvers/lettersSolver';\r\n\r\nexport default function useLettersSolution(selection: string[]) {\r\n\r\n    const [validWords, setValidWords] = useState<string[]>([]);\r\n    const [maxLength, setMaxLength] = useState(0);\r\n    const maxes = validWords.filter(w => w.length === maxLength).filter((word, idx, arr) => arr.indexOf(word) === idx);\r\n\r\n    const addWord = (word: string) => {\r\n        setValidWords(words => [...words, word]);\r\n        setMaxLength(ml => Math.max(ml, word.length));\r\n    };\r\n\r\n    useEffect(() => {\r\n        return findAllWordsFromSelection(selection, addWord);\r\n    }, [selection]);\r\n\r\n    return maxes;\r\n}\r\n","import { useState } from 'react';\r\n\r\nimport useInterval from './useInterval';\r\n\r\nexport default function useTimer(seconds: number, onExpire?: () => void) {\r\n\r\n    const [timeRemaining, setTimeRemaining] = useState(seconds);\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const [isExpired, setIsExpired] = useState(false);\r\n\r\n    useInterval(() => {\r\n        if (timeRemaining > 0) {\r\n            setTimeRemaining(time => Math.max(0, time - 0.02));\r\n        } else {\r\n            setIsRunning(false);\r\n            setIsExpired(true);\r\n            if (onExpire) onExpire();\r\n        }\r\n    }, isRunning ? 20 : null);\r\n\r\n    const startTimer = () => {\r\n        setTimeRemaining(seconds);\r\n        setIsRunning(true);\r\n    };\r\n\r\n    const resumeTimer = () => {\r\n        setIsRunning(true);\r\n    };\r\n\r\n    const stopTimer = () => {\r\n        setIsRunning(false);\r\n    };\r\n\r\n    const expireTimer = () => {\r\n        setIsExpired(true);\r\n    }\r\n\r\n    return { startTimer, resumeTimer, stopTimer, expireTimer, timeRemaining, isRunning, isExpired };\r\n}\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport default function useInterval(callback: () => void, delay: number | null) {\r\n\r\n    const savedCallback = useRef<() => void>();\r\n\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    useEffect(() => {\r\n        if (delay !== null) {\r\n            let id = setInterval(() => savedCallback.current && savedCallback.current(), delay);\r\n            return () => clearInterval(id);\r\n        }\r\n    }, [delay]);\r\n}\r\n","import React from 'react';\r\nimport './Timer.css';\r\n\r\nexport interface TimerProps {\r\n    durationSeconds: number;\r\n    secondsRemaining: number;\r\n}\r\n\r\nconst Timer: React.FC<TimerProps> = ({ secondsRemaining, durationSeconds }) => {\r\n    return (\r\n        <div className=\"timer\">\r\n            <div className=\"timer__progress\" style={progressBarStyle(secondsRemaining, durationSeconds)}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst progressBarStyle = (remaining: number, duration: number) => ({\r\n    width: `${100 * remaining / duration}%`\r\n});\r\n\r\nexport default Timer;\r\n","import React, { useState } from 'react';\r\nimport './LettersRound.css';\r\n\r\nimport useSound from 'use-sound';\r\nimport countdownTheme from '../../media/countdown.mp3';\r\n\r\nimport { getCurrentRoundDescription, getCurrentRound, getP1TotalScore, getP2TotalScore } from '../../game/selectors';\r\nimport { CountdownGame, LettersRound } from '../../game/game';\r\nimport { CountdownAction, drawConsonant, drawVowel, setLettersRoundResult, endRound } from '../../game/actions';\r\nimport Selection from '../Selection/Selection';\r\nimport useLettersDeclarations from '../../hooks/useLettersDeclaration';\r\nimport useLettersSolution from '../../hooks/useLettersSolution';\r\nimport useTimer from '../../hooks/useTimer';\r\nimport Timer from '../Timer/Timer';\r\nimport useEventListener from '../../hooks/useEventListener';\r\n\r\nexport interface LettersRoundProps {\r\n    game: CountdownGame;\r\n    dispatch: (_: CountdownAction) => void;\r\n}\r\n\r\nconst LettersRoundComponent: React.FC<LettersRoundProps> = ({game, dispatch}) => {\r\n\r\n    const roundDescription = getCurrentRoundDescription(game);\r\n    const selection = (getCurrentRound(game) as LettersRound).selection;\r\n    const [declarationsSubmitted, setDeclarationsSubmitted] = useState(false);\r\n\r\n    const {startTimer, timeRemaining, isRunning, isExpired} = useTimer(30);\r\n    const [startSound] = useSound(countdownTheme);\r\n\r\n    const maxes = useLettersSolution(selection);\r\n    const { declaration: p1Declaration, setDeclaration: setP1Declaration, score: p1Score } = useLettersDeclarations(selection);\r\n    const { declaration: p2Declaration, setDeclaration: setP2Declaration, score: p2Score } = useLettersDeclarations(selection);\r\n    const submitText = declarationsSubmitted ? 'Resubmit' : 'Submit';\r\n    const submitDeclarations = () => {\r\n        dispatch(setLettersRoundResult(p1Declaration, p2Declaration, p1Score, p2Score, maxes));\r\n        setDeclarationsSubmitted(true);\r\n    };\r\n\r\n    const pickConsonant = () => {\r\n        if (selection.length < 9 && countConsonants(selection) < 6) {\r\n            dispatch(drawConsonant());\r\n        }\r\n    };\r\n\r\n    const pickVowel = () => {\r\n        if (selection.length < 9 && countVowels(selection) < 5) {\r\n            dispatch(drawVowel());\r\n        }\r\n    };\r\n\r\n    const startRound = () => {\r\n        startTimer();\r\n        startSound({});\r\n    };\r\n\r\n    const handleKeydown = (e: KeyboardEvent) => {\r\n        if (e.repeat) return;\r\n        if (e.keyCode === 67) pickConsonant();\r\n        if (e.keyCode === 86) pickVowel();\r\n        if (e.keyCode === 32) {\r\n            if (!isRunning && !isExpired && selection.length === 9) startRound();\r\n            else if (isExpired && declarationsSubmitted) dispatch(endRound());\r\n        }\r\n        if (e.keyCode === 13) {\r\n            if (isExpired) submitDeclarations();\r\n        }\r\n    }\r\n\r\n    useEventListener('keydown', handleKeydown);\r\n\r\n    return (\r\n        <div className=\"letters-round\">\r\n            <div className=\"game__score\">{game.p1Name} {getP1TotalScore(game)} - {getP2TotalScore(game)} {game.p2Name}</div>\r\n            <div className=\"game__round-description\">Round {game.rounds.length}: Letters picked by {roundDescription.picker}</div>\r\n            <div className=\"game__selection\">\r\n                <Selection selection={extendSelection(selection)}></Selection>\r\n            </div>\r\n            {selection.length < 9 && <div className=\"letters-round__pick-actions\">\r\n                <button className=\"button--grey letters-round__pick\" disabled={countConsonants(selection) >= 6} onClick={pickConsonant}>Consonant (C)</button>\r\n                <button className=\"button--grey letters-round__pick\" disabled={countVowels(selection) >= 5} onClick={pickVowel}>Vowel (V)</button>\r\n            </div>}\r\n            {!isExpired && selection.length === 9 && <div className=\"letters-round__timer game__full-width\">\r\n                <Timer durationSeconds={30} secondsRemaining={timeRemaining}></Timer>\r\n                {!isRunning && !isExpired && <button className=\"button--green\" onClick={startRound}>Start the clock</button>}\r\n            </div>}\r\n            {isExpired && <div className=\"letters-round__declarations game__full-width\">\r\n                <div className=\"letters-round__inputs\">\r\n                    <div className=\"letters-round__declaration\">\r\n                        <div className=\"letters-round__name\">{game.p1Name}</div>\r\n                        <input type=\"text\" value={p1Declaration} onChange={e => setP1Declaration(e.target.value.toUpperCase().trim())}></input>\r\n                    </div>\r\n                    <div className=\"letters-round__declaration\">\r\n                        <div className=\"letters-round__name\">{game.p2Name}</div>\r\n                        <input type=\"text\" value={p2Declaration} onChange={e => setP2Declaration(e.target.value.toUpperCase().trim())}></input>\r\n                    </div>\r\n                </div>\r\n                <button className=\"letters-round__submit button--green\" onClick={() => submitDeclarations()}>{submitText}</button>\r\n            </div>}\r\n            {isExpired && declarationsSubmitted && <div className=\"letters-round__results-preview\">\r\n                <div className=\"letters-round__validity game__full-width\">\r\n                    <span>{p1Score > 0 ? 'Valid' : 'Invalid'}</span>\r\n                    <span>{p2Score > 0 ? 'Valid' : 'Invalid'}</span>\r\n                </div>\r\n                <div className=\"letters-round__maxes\">Best was: {maxes.join(', ')}</div>\r\n                <button className=\"letters-round__end button--blue\" onClick={() => dispatch(endRound())}>End round</button>\r\n            </div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LettersRoundComponent;\r\n\r\nconst isVowel = (letter: string): boolean => letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U';\r\n\r\nconst countConsonants = (selection: string[]) => selection.filter(c => !isVowel(c)).length;\r\n\r\nconst countVowels = (selection: string[]) => selection.filter(c => isVowel(c)).length;\r\n\r\nconst extendSelection = (selection: string[]): string[] => {\r\n    const extended = [...selection];\r\n    while (extended.length < 9) {\r\n        extended.push('');\r\n    }\r\n    return extended;\r\n}\r\n","import { useState } from 'react';\r\n\r\nexport default function useNumbersDeclarations(target: number) {\r\n\r\n    const [declaration, _setDeclaration] = useState(0);\r\n    const [valid, _setValid] = useState(true);\r\n    const [score, setScore] = useState(0);\r\n\r\n    const setDeclaration = (value: number) => {\r\n        _setDeclaration(value);\r\n        setScore(valid ? scoreForDeclaration(value, target) : 0);\r\n    };\r\n\r\n    const setValid = (value: boolean) => {\r\n        _setValid(value);\r\n        setScore(value ? scoreForDeclaration(declaration, target): 0);\r\n    };\r\n\r\n    return { declaration, setDeclaration, valid, setValid, score };\r\n}\r\n\r\nconst scoreForDeclaration = (value: number, target: number): number => {\r\n    if (value === target) return 10;\r\n    if (value >= target - 5 && value <= target + 5) return 7;\r\n    if (value >= target - 10 && value <= target + 10) return 5;\r\n    return 0;\r\n};\r\n","import { useState, useRef, useEffect } from 'react';\r\nimport { CountdownAction, drawSmall, drawLarge, setTarget } from '../game/actions';\r\n\r\nexport default function useNumbersSelection(_dispatch: (_: CountdownAction) => void) {\r\n\r\n    const [selectedLarges, _setSelectedLarges] = useState<number | undefined>(undefined);\r\n    const selectionHasBeenMade = selectedLarges !== undefined;\r\n\r\n    const dispatch = useRef(_dispatch);\r\n\r\n    useEffect(() => {\r\n        dispatch.current = _dispatch;\r\n    }, [_dispatch]);\r\n\r\n    const setSelectedLarges = (larges: number) => {\r\n        _setSelectedLarges(larges);\r\n        for (let i = 0; i < 6 - larges; ++i) {\r\n            setTimeout(() => dispatch.current(drawSmall()), 750 * (i + 1));\r\n        }\r\n        for (let i = 6 - larges; i < 6; ++i) {\r\n            setTimeout(() => dispatch.current(drawLarge()), 750 * (i + 1));\r\n        }\r\n        setTimeout(() => dispatch.current(setTarget()), 750 * 7);\r\n    };\r\n\r\n    return {selectionHasBeenMade, setSelectedLarges};\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { findNumbersMethods } from '../solvers/numbersSolver';\r\n\r\nexport default function useNumbersSolution(selection: number[], target: number) {\r\n\r\n    const [max, setMax] = useState<{value: number, method: string}>({value: 0, method: ''});\r\n    const addSolution = (value: number, method: string) => setMax({value, method});\r\n\r\n    useEffect(() => {\r\n        if (target !== undefined) {\r\n            return findNumbersMethods(selection, target, addSolution);\r\n        }\r\n    }, [selection, target]);\r\n\r\n    return max;\r\n}\r\n","// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport numbersWorker from 'workerize-loader!../workers/numbers.worker';\r\n\r\nexport const findNumbersMethods = (numbers: number[], target: number, onMethodFound: (value: number, method: string) => void): (() => void) => {\r\n    const worker = numbersWorker();\r\n    worker.addEventListener('message', (message: any) => {\r\n        if (message.data.type === 'METHOD') {\r\n            onMethodFound(message.data.value, message.data.method);\r\n        }\r\n    });\r\n    worker.findNumbersMethods(numbers, target);\r\n    return () => worker.terminate();\r\n}\r\n","import React, { useState, KeyboardEvent as KEvent } from 'react';\r\nimport './NumbersRound.css';\r\n\r\nimport useSound from 'use-sound';\r\nimport countdownTheme from '../../media/countdown.mp3';\r\n\r\nimport { getCurrentRoundDescription, getCurrentRound, getP1TotalScore, getP2TotalScore } from '../../game/selectors';\r\nimport { CountdownGame, NumbersRound } from '../../game/game';\r\nimport { CountdownAction, endRound, setNumbersRoundResult } from '../../game/actions';\r\nimport Selection from '../Selection/Selection';\r\nimport useNumbersDeclarations from '../../hooks/useNumbersDeclaration';\r\nimport useNumbersSelection from '../../hooks/useNumbersSelection';\r\nimport useNumbersSolution from '../../hooks/useNumbersSolution';\r\nimport useTimer from '../../hooks/useTimer';\r\nimport Timer from '../Timer/Timer';\r\nimport useEventListener from '../../hooks/useEventListener';\r\n\r\nexport interface NumbersRoundProps {\r\n    game: CountdownGame;\r\n    dispatch: (_: CountdownAction) => void;\r\n}\r\n\r\nconst NumbersRoundComponent: React.FC<NumbersRoundProps> = ({game, dispatch}) => {\r\n\r\n    const roundDescription = getCurrentRoundDescription(game);\r\n    const selection = (getCurrentRound(game) as NumbersRound).selection;\r\n    const target = (getCurrentRound(game) as NumbersRound).target;\r\n    const [declarationsSubmitted, setDeclarationsSubmitted] = useState(false);\r\n\r\n    const {startTimer, timeRemaining, isRunning, isExpired} = useTimer(30);\r\n    const [startSound] = useSound(countdownTheme);\r\n\r\n    const {selectionHasBeenMade, setSelectedLarges} = useNumbersSelection(dispatch);\r\n\r\n    const max = useNumbersSolution(selection, target);\r\n    const { declaration: p1Declaration, setDeclaration: setP1Declaration, valid: p1Valid, setValid: setP1Valid, score: p1Score } = useNumbersDeclarations(target);\r\n    const { declaration: p2Declaration, setDeclaration: setP2Declaration, valid: p2Valid, setValid: setP2Valid, score: p2Score } = useNumbersDeclarations(target);\r\n    const submitText = declarationsSubmitted ? 'Resubmit' : 'Submit';\r\n    const submitDeclarations = () => {\r\n        dispatch(setNumbersRoundResult(p1Declaration, p2Declaration, p1Score, p2Score, max));\r\n        setDeclarationsSubmitted(true);\r\n    };\r\n\r\n    const startRound = () => {\r\n        startTimer();\r\n        startSound({});\r\n    };\r\n\r\n    const makeSelection = (larges: number) => {\r\n        if (!selectionHasBeenMade && !target) {\r\n            setSelectedLarges(larges);\r\n        }\r\n    }\r\n\r\n    const handleKeydown = (e: KeyboardEvent) => {\r\n        if (e.repeat) return;\r\n        if (e.keyCode === 54) makeSelection(0);\r\n        if (e.keyCode >= 48 && e.keyCode <= 52) makeSelection(e.keyCode - 48);\r\n        if (e.keyCode === 32) {\r\n            if (!isRunning && !isExpired && !!target) startRound();\r\n            else if (declarationsSubmitted) dispatch(endRound());\r\n        }\r\n        if (e.keyCode === 13) {\r\n            if (isExpired) submitDeclarations();\r\n        }\r\n    }\r\n\r\n    const inputKeydown = (e: KEvent) => {\r\n        if (e.keyCode === 32) e.stopPropagation();\r\n    }\r\n\r\n    useEventListener('keydown', handleKeydown);\r\n\r\n    return (\r\n        <div className=\"numbers-round\">\r\n            <div className=\"game__score\">{game.p1Name} {getP1TotalScore(game)} - {getP2TotalScore(game)} {game.p2Name}</div>\r\n            <div className=\"game__round-description\">Round {game.rounds.length}: Numbers picked by {roundDescription.picker}</div>\r\n            <div className=\"numbers-round__target\">{target || '...'}</div>\r\n            <div className=\"game__selection\">\r\n                <Selection selection={extendSelection(selection)}></Selection>\r\n            </div>\r\n            {!selectionHasBeenMade && !target && <div className=\"numbers-round__pick-actions\">\r\n                <button className=\"button--grey\" onClick={() => makeSelection(0)}>6 small</button>\r\n                <button className=\"button--grey\" onClick={() => makeSelection(1)}>1 large</button>\r\n                <button className=\"button--grey\" onClick={() => makeSelection(2)}>2 large</button>\r\n                <button className=\"button--grey\" onClick={() => makeSelection(3)}>3 large</button>\r\n                <button className=\"button--grey\" onClick={() => makeSelection(4)}>4 large</button>\r\n            </div>}\r\n            {!!target && <div className=\"numbers-round__timer\">\r\n                <Timer durationSeconds={30} secondsRemaining={timeRemaining}></Timer>\r\n                {!isRunning && !isExpired && <button className=\"button--green\" onClick={startRound}>Start the clock</button>}\r\n            </div>}\r\n            {isExpired && <div className=\"numbers-round__declarations\">\r\n                <div className=\"numbers-round__inputs\">\r\n                    <div className=\"numbers-round__declaration\">\r\n                        <div className=\"numbers-round__name\">{game.p1Name}</div>\r\n                        <input tabIndex={1} type=\"number\" value={p1Declaration || undefined} onChange={e => setP1Declaration(+e.target.value)}></input>\r\n                        <div className=\"numbers-round__validity\">\r\n                            Valid?\r\n                            <input tabIndex={3} type=\"checkbox\" onKeyDown={inputKeydown} checked={p1Valid} onChange={e => setP1Valid(e.target.checked)}></input>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"numbers-round__declaration\">\r\n                        <div className=\"numbers-round__name\">{game.p2Name}</div>\r\n                        <input tabIndex={2} type=\"number\" value={p2Declaration || undefined} onChange={e => setP2Declaration(+e.target.value)}></input>\r\n                        <div className=\"numbers-round__validity\">\r\n                            Valid?\r\n                            <input tabIndex={4} type=\"checkbox\" onKeyDown={inputKeydown} checked={p2Valid} onChange={e => setP2Valid(e.target.checked)}></input>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button className=\"numbers-round__submit button--green\" onClick={() => submitDeclarations()}>{submitText}</button>\r\n            </div>}\r\n            {declarationsSubmitted && <div className=\"numbers-round__results-preview\">\r\n                <div className=\"numbers-round__maxes\">Best was: {max.value} = {max.method}</div>\r\n                <button className=\"numbers-round__end button--blue\" onClick={() => dispatch(endRound())}>End round</button>\r\n            </div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NumbersRoundComponent;\r\n\r\nconst extendSelection = (selection: number[]): string[] => {\r\n    const extended = [];\r\n    for (let i = 0; i < 6 - selection.length; ++i) {\r\n        extended.push('');\r\n    }\r\n    return [...extended, ...selection.map(n => n.toString())];\r\n}\r\n","import { useState, useEffect, useRef } from 'react';\r\nimport useSound from 'use-sound';\r\nimport countdownTheme from '../media/countdown.mp3';\r\nimport conundrums from '../data/conundrums.json';\r\nimport { CountdownAction, revealConundrum, setP1ConundrumDeclaration, setP2ConundrumDeclaration } from '../game/actions';\r\nimport useTimer from './useTimer';\r\n\r\nexport enum ConundrumRoundState {\r\n    WAITING,\r\n    TICKING,\r\n    GUESSING,\r\n    INCORRECT,\r\n    EXPIRED,\r\n    SOLVED,\r\n}\r\n\r\nexport default function useConundrum(initialState: ConundrumRoundState, _dispatch: (_: CountdownAction) => void, answer: string | undefined) {\r\n\r\n    const dispatch = useRef(_dispatch);\r\n    useEffect(() => {\r\n        dispatch.current = _dispatch\r\n    }, [_dispatch]);\r\n\r\n    const [roundState, setRoundState] = useState(initialState);\r\n\r\n    const {resumeTimer, stopTimer, expireTimer, timeRemaining, isRunning, isExpired} = useTimer(32, () => {\r\n        setRoundState(ConundrumRoundState.EXPIRED);\r\n    });\r\n    const [startSound, {pause: pauseSound}] = useSound(countdownTheme);\r\n\r\n    const [buzzTime, setBuzzTime] = useState<number | undefined>(undefined);\r\n    const [p1HasDeclared, setP1HasDeclared] = useState(false);\r\n    const [p2HasDeclared, setP2HasDeclared] = useState(false);\r\n\r\n    const startRound = () => {\r\n        const [scramble, answer] = randomConundrum();\r\n        dispatch.current(revealConundrum(scramble, answer));\r\n        resume();\r\n    };\r\n\r\n    const resume = () => {\r\n        startSound({});\r\n        resumeTimer();\r\n        setRoundState(ConundrumRoundState.TICKING);\r\n    };\r\n\r\n    const buzz = () => {\r\n        pauseSound();\r\n        stopTimer();\r\n        setBuzzTime(32 - timeRemaining);\r\n        setRoundState(ConundrumRoundState.GUESSING);\r\n    };\r\n\r\n    const incorrect = () => {\r\n        setRoundState(ConundrumRoundState.INCORRECT);\r\n    }\r\n\r\n    const expired = () => {\r\n        expireTimer();\r\n        setRoundState(ConundrumRoundState.EXPIRED);\r\n    }\r\n\r\n    const solved = () => {\r\n        expireTimer();\r\n        setRoundState(ConundrumRoundState.SOLVED);\r\n    }\r\n\r\n    const declareForP1 = (guess: string) => {\r\n        setP1HasDeclared(true);\r\n        dispatch.current(setP1ConundrumDeclaration(buzzTime as number, guess));\r\n        if (guess !== answer && !p2HasDeclared) incorrect();\r\n        else if (guess !== answer) expired();\r\n        else solved();\r\n    }\r\n\r\n    const declareForP2 = (guess: string) => {\r\n        setP2HasDeclared(true);\r\n        dispatch.current(setP2ConundrumDeclaration(buzzTime as number, guess));\r\n        if (guess !== answer && !p1HasDeclared) incorrect();\r\n        else if (guess !== answer) expired();\r\n        else solved();\r\n    }\r\n\r\n    return { roundState, startRound, buzz, resume, p1HasDeclared, declareForP1, p2HasDeclared, declareForP2, timeRemaining, isRunning, isExpired };\r\n}\r\n\r\nconst randomConundrum = (): [string, string] => {\r\n    const answer = pickRandomConundrumAnswer();\r\n    const shuffle = decentShuffle();\r\n    const scrambleLetters = shuffle.map(i => answer[i]);\r\n    return [scrambleLetters.join(''), answer];\r\n};\r\n\r\nconst pickRandomConundrumAnswer = (): string => {\r\n    const numberOfConundrums = conundrums.conundrums.length;\r\n    return conundrums.conundrums[Math.floor(numberOfConundrums * Math.random())];\r\n};\r\n\r\nconst decentShuffle = (): number[] => {\r\n    const shuffle = singleShuffle();\r\n    if (inversions(shuffle) >= 18) return shuffle;\r\n    return shuffle.reverse();\r\n};\r\n\r\nconst inversions = (shuffle: number[]): number => {\r\n    let inversions = 0;\r\n    for (let i = 0; i < shuffle.length; ++i) {\r\n        for (let j = 0; j < shuffle.length; ++j) {\r\n            if (shuffle[i] > shuffle[j]) ++inversions;\r\n        }\r\n    }\r\n    return inversions;\r\n};\r\n\r\nconst singleShuffle = () => {\r\n    const items = [...Array(9)].map((_, idx) => idx);\r\n    for (let i = items.length - 1; i > 0; --i) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [items[i], items[j]] = [items[j], items[i]];\r\n    }\r\n    return items;\r\n};\r\n","import React, { useState, KeyboardEvent as KEvent } from 'react';\r\nimport './ConundrumRound.css';\r\n\r\nimport { CountdownGame, ConundrumRound } from '../../game/game';\r\nimport { CountdownAction, solveConundrum, endRound } from '../../game/actions';\r\nimport { getCurrentRound, getP1TotalScore, getP2TotalScore } from '../../game/selectors';\r\nimport useConundrum, { ConundrumRoundState } from '../../hooks/useConundrum';\r\nimport Selection from '../Selection/Selection';\r\nimport Timer from '../Timer/Timer';\r\nimport useEventListener from '../../hooks/useEventListener';\r\n\r\nexport interface ConundrumRoundProps {\r\n    game: CountdownGame;\r\n    dispatch: (_: CountdownAction) => void;\r\n}\r\n\r\nconst ConundrumRoundComponent: React.FC<ConundrumRoundProps> = ({game, dispatch}) => {\r\n\r\n    const round = getCurrentRound(game) as ConundrumRound;\r\n\r\n    const [p1Declaration, setP1Declaration] = useState('');\r\n    const [p2Declaration, setP2Declaration] = useState('');\r\n\r\n    const initialRoundState = () => {\r\n        if (round.solved) return ConundrumRoundState.SOLVED;\r\n        else return ConundrumRoundState.WAITING;\r\n    };\r\n    const { roundState, startRound, buzz, resume, p1HasDeclared, declareForP1, p2HasDeclared, declareForP2, timeRemaining } = useConundrum(initialRoundState(), dispatch, round.answer);\r\n\r\n    const selectionToShow = () => {\r\n        if (roundState === ConundrumRoundState.WAITING || roundState === ConundrumRoundState.GUESSING) return emptySelection();\r\n        else if (roundState === ConundrumRoundState.INCORRECT) return incorrectSelection();\r\n        else if (roundState === ConundrumRoundState.EXPIRED && !round.solved && p1HasDeclared && p2HasDeclared) return incorrectSelection();\r\n        else return getSelection(round);\r\n    };\r\n\r\n    const showBuzzer = roundState === ConundrumRoundState.TICKING && !round.solved && (!p1HasDeclared || !p2HasDeclared);\r\n    const showReveal = roundState === ConundrumRoundState.EXPIRED && !round.solved;\r\n\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n        if (e.keyCode === 32) {\r\n            if (roundState === ConundrumRoundState.WAITING) startRound();\r\n            else if (roundState === ConundrumRoundState.INCORRECT) resume();\r\n            else if (showBuzzer) buzz();\r\n            else if (showReveal) dispatch(solveConundrum());\r\n            else if (round.solved) dispatch(endRound());\r\n        }\r\n    }\r\n\r\n    const handleP1KeyDown = (e: KEvent) => {\r\n        if (e.keyCode === 13) {\r\n            declareForP1(p1Declaration);\r\n        }\r\n        e.stopPropagation();\r\n    }\r\n\r\n    const handleP2KeyDown = (e: KEvent) => {\r\n        if (e.keyCode === 13) {\r\n            declareForP2(p2Declaration);\r\n        }\r\n        e.stopPropagation();\r\n    }\r\n\r\n    useEventListener('keydown', handleKeyDown);\r\n\r\n    return (\r\n        <div className=\"conundrum-round\">\r\n            <div className=\"game__score\">{game.p1Name} {getP1TotalScore(game)} - {getP2TotalScore(game)} {game.p2Name}</div>\r\n            <div className=\"game__round-description\">Round {game.rounds.length}: Conundrum</div>\r\n            <div className=\"game__selection\">\r\n                <Selection selection={selectionToShow()}></Selection>\r\n            </div>\r\n            <div className=\"conundrum-round__timer\">\r\n                <Timer durationSeconds={30} secondsRemaining={Math.max(0, timeRemaining - 2)}></Timer>\r\n            </div>\r\n            {roundState === ConundrumRoundState.WAITING && <div className=\"conundrum-round__pick-actions\">\r\n                <button className=\"button--green\" onClick={startRound}>Reveal conundrum</button>\r\n            </div>}\r\n            {showBuzzer && <div className=\"conundrum-round__buzzer\">\r\n                <button className=\"button--red conundrum-round__buzz\" onClick={() => buzz()}>Buzz!</button>\r\n            </div>}\r\n            {roundState === ConundrumRoundState.INCORRECT && <div className=\"conundrum-round__resume\">\r\n                <button className=\"button--green conundrum-round__resume\" onClick={() => resume()}>Resume</button>\r\n            </div>}\r\n            {roundState === ConundrumRoundState.GUESSING && <div className=\"conundrum-round__declarations\">\r\n                <div className=\"conundrum-round__declaration\">\r\n                    <div className=\"conundrum-round__name\">{game.p1Name}</div>\r\n                    <input disabled={p1HasDeclared} type=\"text\" value={p1Declaration} onKeyDown={e => handleP1KeyDown(e)} onChange={e => setP1Declaration(e.target.value.toUpperCase())}></input>\r\n                    <button className=\"button--green\" disabled={p1HasDeclared} onClick={() => declareForP1(p1Declaration)}>Submit</button>\r\n                </div>\r\n                <div className=\"conundrum-round__declaration\">\r\n                    <div className=\"conundrum-round__name\">{game.p2Name}</div>\r\n                    <input disabled={p2HasDeclared} type=\"text\" value={p2Declaration} onKeyDown={e => handleP2KeyDown(e)} onChange={e => setP2Declaration(e.target.value.toUpperCase())}></input>\r\n                    <button className=\"button--green\" disabled={p2HasDeclared} onClick={() => declareForP2(p2Declaration)}>Submit</button>\r\n                </div>\r\n            </div>}\r\n            {showReveal && <div className=\"conundrum-round__solve-button\">\r\n                <button className=\"button--green\" onClick={() => dispatch(solveConundrum())}>Reveal answer</button>\r\n            </div>}\r\n            {(roundState === ConundrumRoundState.SOLVED || roundState === ConundrumRoundState.EXPIRED) && round.solved && <div className=\"conundrum-round__results\">\r\n                {round.p1Score > 0 && <span>Solved by {game.p1Name}!</span>}\r\n                {round.p2Score > 0 && <span>Solved by {game.p2Name}!</span>}\r\n                {round.p1Score === 0 && round.p2Score === 0 && <span>No-one solved it!</span>}\r\n                <button className=\"button--blue\" onClick={() => dispatch(endRound())}>End round</button>\r\n            </div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ConundrumRoundComponent;\r\n\r\nconst emptySelection = () => ['', '', '', '', '', '', '', '', ''];\r\n\r\nconst incorrectSelection = () => ['I', 'N', 'C', 'O', 'R', 'R', 'E', 'C', 'T'];\r\n\r\nconst getSelection = (round: ConundrumRound) => {\r\n    if (round.scramble === undefined) return emptySelection();\r\n    else if (!round.solved) return [...round.scramble];\r\n    else return [...round.answer];\r\n};\r\n","import React from 'react';\r\nimport './Recap.css';\r\n\r\nimport { CountdownGame, Round, LettersRound, NumbersRound, ConundrumRound } from '../../game/game';\r\nimport { getP1CumulativeScore, getP2CumulativeScore, getMaxCumulativeScore } from '../../game/selectors';\r\n\r\nexport interface RecapProps {\r\n    game: CountdownGame;\r\n}\r\n\r\nconst Recap: React.FC<RecapProps> = ({ game }) => {\r\n\r\n    const renderHeader = () => <tr>\r\n        <td>Round</td>\r\n        <td>Selection</td>\r\n        <td>{game.p1Name}</td>\r\n        <td>Score</td>\r\n        <td>{game.p2Name}</td>\r\n        <td>Best</td>\r\n        <td>Max Score</td>\r\n    </tr>;\r\n\r\n    const renderLettersRow = (round: LettersRound, index: number) => <tr key={index}>\r\n        <td>{index + 1}</td>\r\n        <td>{round.selection.join(' ')}</td>\r\n        <td className={round.p1Score > 0 ? '' : 'invalid'}>{round.p1Declaration}</td>\r\n        <td>{getP1CumulativeScore(game, index)} - {getP2CumulativeScore(game, index)}</td>\r\n        <td className={round.p2Score > 0 ? '' : 'invalid'}>{round.p2Declaration}</td>\r\n        <td title={round.maxes.join(', ')} className={round.maxes.length > 1 ? 'more-maxes' : ''}>{round.maxes[0]}</td>\r\n        <td>{getMaxCumulativeScore(game, index)}</td>\r\n    </tr>;\r\n\r\n    const renderNumbersRow = (round: NumbersRound, index: number) => <tr key={index}>\r\n        <td className=\"recap__round-number\">{index + 1}</td>\r\n        <td className=\"recap__numbers-selection\">{round.selection.join(' ')} → {round.target}</td>\r\n        <td className={round.p1Score > 0 ? '' : 'invalid'}>{round.p1Declaration}</td>\r\n        <td className=\"recap__score\">{getP1CumulativeScore(game, index)} - {getP2CumulativeScore(game, index)}</td>\r\n        <td className={round.p2Score > 0 ? '' : 'invalid'}>{round.p2Declaration}</td>\r\n        <td title={`${round.max.value} = ${round.max.method}`}>{round.max.value}</td>\r\n        <td>{getMaxCumulativeScore(game, index)}</td>\r\n    </tr>;\r\n\r\n    const renderConundrumRow = (round: ConundrumRound, index: number) => <tr key={index}>\r\n        <td className=\"recap__round-number\">{index + 1}</td>\r\n        <td className=\"recap__conundrum-selection\">{[...round.scramble].join(' ')}</td>\r\n        <td>\r\n            <div className={round.p1Score > 0 || !round.p1Declaration ? '' : 'invalid'}>{round.p1Declaration}</div>\r\n            {!!round.p1BuzzTime && <div>{normalizeBuzzTime(round.p1BuzzTime)} seconds</div>}\r\n        </td>\r\n        <td className=\"recap__score\">{getP1CumulativeScore(game, index)} - {getP2CumulativeScore(game, index)}</td>\r\n        <td>\r\n            <div className={round.p2Score > 0 || !round.p2Declaration ? '' : 'invalid'}>{round.p2Declaration}</div>\r\n            {!!round.p2BuzzTime && <div>{normalizeBuzzTime(round.p2BuzzTime)} seconds</div>}\r\n        </td>\r\n        <td>{round.p1Score === 0 && round.p2Score === 0 ? round.answer : ''}</td>\r\n        <td>{getMaxCumulativeScore(game, index)}</td>\r\n    </tr>;\r\n\r\n    const renderRoundRow = (round: Round, index: number) => {\r\n        switch (round.type) {\r\n            case 'LETTERS': return renderLettersRow(round, index);\r\n            case 'NUMBERS': return renderNumbersRow(round, index);\r\n            case 'CONUNDRUM': return renderConundrumRow(round, index);\r\n        }\r\n    };\r\n\r\n    const normalizeBuzzTime = (buzzTime: number) => {\r\n        let roundedBuzzTime = (Math.round(buzzTime * 4) / 4);\r\n        let adjustedBuzzTime = Math.min(30, Math.max(0.25, roundedBuzzTime - 0.5));\r\n        return adjustedBuzzTime.toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <div className=\"recap\">\r\n            <table>\r\n                <thead>\r\n                    {renderHeader()}\r\n                </thead>\r\n                <tbody>\r\n                    {game.rounds.map((rd, idx) => renderRoundRow(rd, idx))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recap;\r\n","import React from 'react';\r\nimport './GameOver.css';\r\n\r\nimport { CountdownGame } from '../../game/game';\r\nimport { CountdownAction, createNewGame } from '../../game/actions';\r\nimport { getP1TotalScore, getP2TotalScore } from '../../game/selectors';\r\nimport Selection from '../Selection/Selection';\r\nimport Recap from '../Recap/Recap';\r\n\r\nexport interface GameOverProps {\r\n    game: CountdownGame;\r\n    dispatch: (_: CountdownAction) => void;\r\n}\r\n\r\nconst GameOver: React.FC<GameOverProps> = ({game, dispatch}) => {\r\n    return (\r\n        <div className=\"game-over\">\r\n            <div className=\"game__selection\">\r\n                <Selection selection={['G', 'A', 'M', 'E', ' ', 'O', 'V', 'E', 'R']}></Selection>\r\n            </div>\r\n            <div className=\"game__score\">{game.p1Name} {getP1TotalScore(game)} - {getP2TotalScore(game)} {game.p2Name}</div>\r\n            <div className=\"game__recap\">\r\n                <Recap game={game}></Recap>\r\n            </div>\r\n            <button className=\"button--blue\" onClick={() => dispatch(createNewGame())}>Start New Game</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GameOver;\r\n","import React from 'react';\nimport './App.css';\n\nimport useCountdownGame from '../hooks/useCountdownGame';\nimport { getGameState } from '../game/selectors';\n\nimport NewGame from '../components/NewGame/NewGame';\nimport BetweenRounds from '../components/BetweenRounds/BetweenRounds';\nimport LettersRound from '../components/LettersRound/LettersRound';\nimport NumbersRound from '../components/NumbersRound/NumbersRound';\nimport ConundrumRound from '../components/ConundrumRound/ConundrumRound';\nimport GameOver from '../components/GameOver/GameOver';\nimport { createNewGame } from '../game/actions';\n\nfunction App() {\n\n    const [game, dispatch] = useCountdownGame();\n    const gameState = getGameState(game);\n\n    return (\n        <div className=\"app\">\n            <div className=\"app__abandon-link\">\n                {gameState !== 'WAITING' && gameState !== 'ENDED' && <button className=\"button--text\" onClick={() => dispatch(createNewGame())}>Abandon game</button>}\n            </div>\n            <div className=\"app__game\">\n                {gameState === 'WAITING' && <NewGame game={game} dispatch={dispatch}></NewGame>}\n                {gameState === 'BETWEEN' && <BetweenRounds game={game} dispatch={dispatch}></BetweenRounds>}\n                {gameState === 'LETTERS' && <LettersRound game={game} dispatch={dispatch}></LettersRound>}\n                {gameState === 'NUMBERS' && <NumbersRound game={game} dispatch={dispatch}></NumbersRound>}\n                {gameState === 'CONUNDRUM' && <ConundrumRound game={game} dispatch={dispatch}></ConundrumRound>}\n                {gameState === 'ENDED' && <GameOver game={game} dispatch={dispatch}></GameOver>}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}